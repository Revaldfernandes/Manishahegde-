6) File :

import os.path
import sys

fname = input("Enter the filename : ")      

if not os.path.isfile(fname):
    print("File", fname, "doesn't exists")
    sys.exit(0)

infile = open(fname, "r")

lineList = infile.readlines()

for i in range(20):
    print(i+1, ":", lineList[i])
    
word = input("Enter a word : ")
cnt = 0
for line in lineList:
    cnt += line.count(word)

print("The word", word, "appears", cnt, "times in the file")

------------------------------------------------------------------

6 b) zip :

import os
import sys
import pathlib
import zipfile

dirName = input("Enter Directory name that you want to backup : ")

if not os.path.isdir(dirName):
    print("Directory", dirName, "doesn't exists")
    sys.exit(0)
    
curDirectory = pathlib.Path(dirName)
    
with zipfile.ZipFile("myZip.zip", mode="w") as archive:
    for file_path in curDirectory.rglob("*"):
        archive.write(file_path, arcname=file_path.relative_to(curDirectory))
    
if os.path.isfile("myZip.zip"):
    print("Archive", "myZip.zip", "created successfully")
else:
    print("Error in creating zip archive")


-------------------------------------------------------------------------------------------------------------------------------------------------------------

7 a) area of triangle,circle,rectangle


import math

class Shape:
    def __init__(self):
        self.area = 0
        self.name = ""
        
    def showArea(self):
        print("The area of the", self.name, "is", self.area, "units")
        
class Circle(Shape):
    def __init__(self,radius):
        self.area = 0
        self.name = "Circle"
        self.radius = radius
        
    def calcArea(self):
        self.area = math.pi * self.radius * self.radius
    
class Rectangle(Shape):
    def __init__(self,length,breadth):
        self.area = 0
        self.name = "Rectangle"
        self.length = length
        self.breadth = breadth
        
    def calcArea(self):
        self.area = self.length * self.breadth

class Triangle(Shape):
    def __init__(self,base,height):
        self.area = 0
        self.name = "Triangle"
        self.base = base
        self.height = height
        
    def calcArea(self):
        self.area = self.base * self.height / 2
    

    
c1 = Circle(5)
c1.calcArea()
c1.showArea()


r1 = Rectangle(5, 4)
r1.calcArea()
r1.showArea()


t1 = Triangle(3, 4)
t1.calcArea()
t1.showArea()

---------------------------------------------


7 b) employee :




class Employee:
    def __init__(self):
        self.name = ""
        self.empId = ""
        self.dept = ""
        self.salary = 0
        
    def getEmpDetails(self):
        self.name = input("Enter Employee name : ")
        self.empId = input("Enter Employee ID : ")
        self.dept = input("Enter Employee Dept : ")
        self.salary = int(input("Enter Employee Salary : "))
        
    def showEmpDetails(self):
        print("Employee Details")
        print("Name : ", self.name)
        print("ID : ", self.empId)
        print("Dept : ", self.dept)
        print("Salary : ", self.salary)
        
    def updtSalary(self):
        self.salary = int(input("Enter new Salary : "))
        print("Updated Salary", self.salary)
        

e1 = Employee()
e1.getEmpDetails()
e1.showEmpDetails()
e1.updtSalary()

-------------------------------------------------------------------------------------------------------------------------------------------

8 a) palindrome :

class A:
	def __init__(self,s):
	 self.s=s
	def palindrome(self):
	rev=self.s[::-1]
	if rev==self.s:
	 print("The string is palindrome")
	else:
	 print("Not a palindrome")
class B(A):
	def palindrome(self):
	 temp=self.s
	  rev=0
	  count=0
	while(self.s!=0):
	dig=self.s%10
	rev=rev*10+dig
	self.s=self.s/10
       if temp==rev:
	print("The number is palindrome")
       else:
	print("Not a palindrome")
a=A(input("Enter a string))
b=B(int(input(ener a integer)))
a.palindrome()
b.palindrome()


--------------------------------------------------------------------------------------------------------------------------------------------

9 a) xkcd comic:


import requests
import os
from bs4 import BeautifulSoup

url = 'https://xkcd.com/1/'


if not os.path.exists('xkcd_comics'):
    os.makedirs('xkcd_comics')

while True:
    
    res = requests.get(url)
    res.raise_for_status()

    
    soup = BeautifulSoup(res.text, 'html.parser')

   
    comic_elem = soup.select('#comic img')
    if comic_elem == []:
        print('Could not find comic image.')
    else:
        comic_url = 'https:' + comic_elem[0].get('src')


        print(f'Downloading {comic_url}...')
        res = requests.get(comic_url)
        res.raise_for_status()

     
        image_file = open(os.path.join('xkcd_comics', os.path.basename(comic_url)), 'wb')
        for chunk in res.iter_content(100000):
            image_file.write(chunk)
        image_file.close()

    prev_link = soup.select('a[rel="prev"]')[0]
    if not prev_link:
        break
    url = 'https://xkcd.com' + prev_link.get('href')

print('All comics downloaded.')

--------------------------------------------------------------------------

9 b)  spreadsheet :

from openpyxl import Workbook, load_workbook
import time
book =Workbook()
sheet =book.active

sheet['A1']=56
sheet['A2']=43

now = time.strftime("%x")
sheet["A3"]=now
book.save("sample2.xlsx")
wb= load_workbook("sample2.xlsx")
sheet=wb.worksheets[0]
sheet2 = wb.create_sheet('demo')
name= ["asd","zxc","qwe","asd","dfg"]
salary = ["12345","23456","34567","45678","56789"]
sheet2.cell(row=1, column=1).value ="name"
sheet2.cell(row=1, column=2).value = "salary"
j=2
for i in range(0,5):
    sheet2.cell(row=j,column=1).value= name[i]
    sheet2.cell(row=j,column=2).value= salary[i]
    j+=1
print(wb.active)
sheet.cell(row=6,column=9).value = "Deeksha"
sheet['F10']=100
print(wb.active)
print(wb.sheetnames)
wb.save("sample2.xlsx")
print("Reading Row1", sheet["A1"].value)
print("Reading Row3", sheet["A3"].value)
cells = sheet['A1':'B3']
for c1, c2 in cells:
    print(c1.value, c2.value)


---------------------------------------------------------------------------------------------------------------------------

10 a) pdf:


from PyPDF2 import PdfWriter, PdfReader

num = int(input("Enter page number you want combine from multiple documents "))

pdf1 = open('birds.pdf', 'rb')
pdf2 = open('birdspic.pdf', 'rb')

pdf_writer = PdfWriter()

pdf1_reader = PdfReader(pdf1)    
page = pdf1_reader.pages[num - 1]
pdf_writer.add_page(page)

pdf2_reader = PdfReader(pdf2)    
page = pdf2_reader.pages[num - 1]
pdf_writer.add_page(page)

with open('output.pdf', 'wb') as output:
    pdf_writer.write(output)


10 b1) offline data using json :


import json


with open('weather_data.json') as f:
    data = json.load(f)


current_temp = data['main']['temp']
humidity = data['main']['humidity']
weather_desc = data['weather'][0]['description']


print(f"Current temperature: {current_temp}Â°C")
print(f"Humidity: {humidity}%")
print(f"Weather description: {weather_desc}")


JASON FILE:


{
  "coord": {
    "lon": -73.99,
    "lat": 40.73
  },
  "weather": [
    {
      "id": 800,
      "main": "Clear",
      "description": "clear sky",
      "icon": "01d"
    }
  ],
  "base": "stations",
  "main": {
    "temp": 15.45,
    "feels_like": 12.74,
    "temp_min": 14.44,
    "temp_max": 16.11,
    "pressure": 1017,
    "humidity": 64
  },
  "visibility": 10000,
  "wind": {
    "speed": 4.63,
    "deg": 180
  },
  "clouds": {
    "all": 1
  },
  "dt": 1617979985,
  "sys": {
    "type": 1,
    "id": 5141,
    "country": "US", 
    "sunrise": 1617951158,
    "sunset": 1618000213
  },
  "timezone": -14400,
  "id": 5128581,
  "name": "New York",
  "cod": 200
}

-------------------------------------------------------------


10 b2) online data :




import requests, json  
 
api_key = "Entering of the API"  
 
base_url = "http://api.openweathermap.org/data/2.5/weather?"  

city_name = input("Entering up the city name : ")  

complete_url = base_url + "appid=" + api_key + "&q=" + city_name

response = requests.get(complete_url)  

x = response.json()  

if x["cod"] != "404":  
     
    y = x["main"]  
      
    current_temperature = y["temp"]  
    current_pressure = y["pressure"]  
   
    
    current_humidity = y["humidity"]  

    z = x["weather"]  
  
    weather_description = z[0]["description"]  
   
    print(" Temperature (in kelvin unit) = " +   str(current_temperature) +  
        "\n atmospheric pressure display(in hPa unit) = " +   str(current_pressure) +  
        "\n humidity display(in percentage) = " + str(current_humidity) +  
        "\n description = " + str(weather_description))  
else:  
print(" CITY NOT FOUND! ")  



